import Agenda, { Job } from "agenda";
import { AuditUserLoggedIn } from "@back-end/types/audit";
import { CreateFactMetricProps } from "@back-end/types/fact-table";
import { trackJob } from "../services/otel";
import { getContextForAgendaJobByOrgId } from "../services/organizations";
import { logger } from "../util/logger";
import { getFactTable } from "../models/FactTableModel";
import { getSourceIntegrationObject } from "../services/datasource";
import { getDataSourceById } from "../models/DataSourceModel";
import { insertAudit } from "../models/AuditModel";
import { auditDetailsCreate } from "../services/audit";

const CREATE_AUTOGENERATED_FACT_METRICS_JOB_NAME =
  "createAutoGeneratedFactMetrics";

type CreateAutoGeneratedFactMetricsJob = Job<{
  organizationId: string;
  factTableId: string;
  factMetricsToCreate: CreateFactMetricProps[];
  user: AuditUserLoggedIn;
}>;

const createAutoGeneratedFactMetrics = trackJob(
  CREATE_AUTOGENERATED_FACT_METRICS_JOB_NAME,
  async (job: CreateAutoGeneratedFactMetricsJob) => {
    const {
      factTableId,
      organizationId,
      factMetricsToCreate,
      user,
    } = job.attrs.data;
    const context = await getContextForAgendaJobByOrgId(organizationId);
    try {
      const factTable = await getFactTable(context, factTableId);

      if (!factTable) throw new Error("Unable to locate fact table");

      const datasource = await getDataSourceById(context, factTable.datasource);

      if (!datasource) throw new Error("No datasource");

      const integration = getSourceIntegrationObject(context, datasource);

      //TODO: Should I rename this?
      if (!integration.getSourceProperties().supportsAutoGeneratedFactTables)
        throw new Error(
          "Auto generated fact tables not supported for this data source"
        );
      const newFactMetrics = await context.models.factMetrics.createFactMetrics(
        factMetricsToCreate
      );

      for (const factMetric of newFactMetrics) {
        await insertAudit({
          event: "factMetric.autocreate",
          entity: {
            object: "factMetric",
            id: factMetric.id,
          },
          organization: organizationId,
          dateCreated: new Date(),
          details: auditDetailsCreate(factMetric),
          user,
        });
      }
    } catch (e) {
      logger.error(
        e,
        `Failed to generate auto fact metrics for factTableId: ${factTableId}. Reason: ${e.mesage}`
      );
    }
  }
);

let agenda: Agenda;
export default function (ag: Agenda) {
  agenda = ag;
  agenda.define(
    CREATE_AUTOGENERATED_FACT_METRICS_JOB_NAME,
    createAutoGeneratedFactMetrics
  );
}

export async function queueCreateAutoGeneratedFactMetrics(
  organizationId: string,
  factTableId: string,
  factMetricsToCreate: CreateFactMetricProps[],
  user: AuditUserLoggedIn
) {
  if (
    !organizationId ||
    !factMetricsToCreate ||
    !factMetricsToCreate.length ||
    !user
  )
    return;

  const job = agenda.create(CREATE_AUTOGENERATED_FACT_METRICS_JOB_NAME, {
    organizationId,
    factTableId,
    factMetricsToCreate,
    user,
  }) as CreateAutoGeneratedFactMetricsJob;
  job.unique({ factTableId, organizationId });
  job.schedule(new Date());
  await job.save();
}
